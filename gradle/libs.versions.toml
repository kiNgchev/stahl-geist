[versions]
kotlin = "2.2.0"
kotlinx-serialization = "1.9.0"
spring-boot = "3.5.0"
jmh = "1.37"
jmh-plugin = "0.7.3"
spring-boot-admin = "3.5.0"
spring-cloud = "2025.0.0"
spring-modulith = "1.4.0"
jjwt = "0.12.5"
mapstruct = "1.6.3"
gatling = "3.11.3"

[libraries]
# Spring Boot starters
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-batch = { module = "org.springframework.boot:spring-boot-starter-batch" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-starter-data-redis-reactive = { module = "org.springframework.boot:spring-boot-starter-data-redis-reactive" }
spring-boot-starter-data-rest = { module = "org.springframework.boot:spring-boot-starter-data-rest" }
spring-boot-starter-quartz = { module = "org.springframework.boot:spring-boot-starter-quartz" }
spring-boot-starter-thymeleaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-boot-starter-cache = { module = "org.springframework.boot:spring-boot-starter-cache" }
caffeine = { module = "com.github.ben-manes.caffeine:caffeine" }

# Security
spring-boot-starter-oauth2-authorization-server = { module = "org.springframework.boot:spring-boot-starter-oauth2-authorization-server" }
spring-boot-starter-oauth2-client = { module = "org.springframework.boot:spring-boot-starter-oauth2-client" }
spring-boot-starter-oauth2-resource-server = { module = "org.springframework.boot:spring-boot-starter-oauth2-resource-server" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }

# Spring Boot development and runtime
spring-boot-devtools = { module = "org.springframework.boot:spring-boot-devtools" }
spring-boot-docker-compose = { module = "org.springframework.boot:spring-boot-docker-compose" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor" }

# Spring Cloud
spring-cloud-config-server = { module = "org.springframework.cloud:spring-cloud-config-server" }
spring-cloud-starter-config = { module = "org.springframework.cloud:spring-cloud-starter-config" }
spring-cloud-starter-gateway-server-webflux = { module = "org.springframework.cloud:spring-cloud-starter-gateway-server-webflux" }
spring-cloud-starter-netflix-eureka-client = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client" }
spring-cloud-starter-netflix-eureka-server = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server" }
spring-cloud-starter-vault-config = { module = "org.springframework.cloud:spring-cloud-starter-vault-config" }

# Spring Modulith
spring-modulith-events-api = { module = "org.springframework.modulith:spring-modulith-events-api" }
spring-modulith-starter-core = { module = "org.springframework.modulith:spring-modulith-starter-core" }
spring-modulith-actuator = { module = "org.springframework.modulith:spring-modulith-actuator" }
spring-modulith-events-kafka = { module = "org.springframework.modulith:spring-modulith-events-kafka" }
spring-modulith-observability = { module = "org.springframework.modulith:spring-modulith-observability" }

# Spring Boot Admin
spring-boot-admin-starter-client = { module = "de.codecentric:spring-boot-admin-starter-client" }
spring-boot-admin-starter-server = { module = "de.codecentric:spring-boot-admin-starter-server" }

# Spring Framework
spring-jdbc = { module = "org.springframework:spring-jdbc" }
spring-kafka = { module = "org.springframework.kafka:spring-kafka" }
spring-session-data-redis = { module = "org.springframework.session:spring-session-data-redis" }

# Kotlin
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor" }
reactor-kotlin-extensions = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions" }
kotlin-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlin-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinx-serialization" }
kotlin-serialization-json-jvm = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm", version.ref = "kotlinx-serialization" }
kotlin-serialization-core-jvm = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm", version.ref = "kotlinx-serialization" }

# Jackson
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }

# Database
liquibase-core = { module = "org.liquibase:liquibase-core" }
postgresql = { module = "org.postgresql:postgresql" }

# Monitoring
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus" }
logback-loki = { group = "com.github.loki4j", name = "loki-logback-appender", version = "1.4.1" }
janino = { group = "org.codehaus.janino", name = "janino" }

# Other
lombok = { module = "org.projectlombok:lombok" }
thymeleaf-extras-springsecurity6 = { module = "org.thymeleaf.extras:thymeleaf-extras-springsecurity6" }

# JWT
jjwt-api = { group = "io.jsonwebtoken", name = "jjwt-api", version.ref = "jjwt" }
jjwt-impl = { group = "io.jsonwebtoken", name = "jjwt-impl", version.ref = "jjwt" }
jjwt-jackson = { group = "io.jsonwebtoken", name = "jjwt-jackson", version.ref = "jjwt" }

# MapStruct
mapstruct = { group = "org.mapstruct", name = "mapstruct", version.ref = "mapstruct" }
mapstruct-processor = { group = "org.mapstruct", name = "mapstruct-processor", version.ref = "mapstruct" }

# Test dependencies
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-boot-testcontainers = { module = "org.springframework.boot:spring-boot-testcontainers" }

reactor-test = { module = "io.projectreactor:reactor-test" }

kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test" }

spring-batch-test = { module = "org.springframework.batch:spring-batch-test" }
spring-kafka-test = { module = "org.springframework.kafka:spring-kafka-test" }
spring-modulith-starter-test = { module = "org.springframework.modulith:spring-modulith-starter-test" }
spring-restdocs-webtestclient = { module = "org.springframework.restdocs:spring-restdocs-webtestclient" }
spring-security-test = { module = "org.springframework.security:spring-security-test" }

testcontainers-junit-jupiter = { module = "org.testcontainers:junit-jupiter" }
testcontainers-kafka = { module = "org.testcontainers:kafka" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql" }
testcontainers-r2dbc = { module = "org.testcontainers:r2dbc" }
testcontainers-vault = { module = "org.testcontainers:vault" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher" }

jmh-core = { group = "org.openjdk.jmh", name = "jmh-core", version.ref = "jmh" }
jmh-generator = { group = "org.openjdk.jmh", name = "jmh-generator-annprocess", version.ref = "jmh" }

datafaker = { group = "net.datafaker", name = "datafaker", version = "1.7.0" }

gatling-charts-highcharts = { group = "io.gatling.highcharts", name = "gatling-charts-highcharts", version.ref = "gatling" }
gatling-app = { group = "io.gatling", name = "gatling-app", version.ref = "gatling" }
gatling-recorder = { group = "io.gatling", name = "gatling-recorder", version.ref = "gatling" }

[plugins]
# Build plugins
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlin-jpa = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin" }
kotlin-allopen = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "kotlin"}
jmh = { id = "me.champeau.jmh", version.ref = "jmh-plugin" }
dependency-managment = { id = "io.spring.dependency-management", version = "1.1.7" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
asciidoctor = { id = "org.asciidoctor.jvm.convert", version = "4.0.4" }
kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
gatling = { id = "io.gatling.gradle", version.ref = "gatling" }

[bundles]
# Spring dependency bundles
spring-implementation = [
    "spring-boot-starter-actuator",
    "spring-boot-starter-batch",
    "spring-boot-starter-data-jpa",
    "spring-boot-starter-data-redis-reactive",
    "spring-boot-starter-data-rest",
    "spring-boot-starter-oauth2-client",
    "spring-boot-starter-quartz",
    "spring-boot-starter-security",
    "spring-boot-starter-thymeleaf",
    "spring-boot-starter-validation",
    "spring-boot-starter-webflux",
    "jackson-module-kotlin",
    "spring-boot-admin-starter-client",
    "reactor-kotlin-extensions",
    "liquibase-core",
    "spring-cloud-starter-config",
    "spring-cloud-starter-netflix-eureka-client",
    "spring-cloud-starter-vault-config",
    "spring-kafka",
    #"spring-modulith-events-api",
    #"spring-modulith-starter-core",
    "spring-session-data-redis",
    "thymeleaf-extras-springsecurity6",
    "kotlin-reflect",
    "kotlinx-coroutines-reactor",
    "logback-loki",
    "janino",
    "spring-boot-starter-cache",
    "caffeine",
    "jjwt-api",
    "jjwt-impl",
    "jjwt-jackson",
    "mapstruct"
]

kotlinx-serialization = [
    "kotlin-serialization-json",
    "kotlin-serialization-core",
    "kotlin-serialization-json-jvm",
    "kotlin-serialization-core-jvm"
]

spring-development-only = [
    "spring-boot-devtools",
]

spring-runtime-only = [
    "micrometer-registry-prometheus",
    "postgresql",
    # "spring-modulith-actuator",
    # "spring-modulith-events-kafka",
    # "spring-modulith-observability"
]

spring-compile-only = [
    "lombok"
]

spring-annotation-processor = [
    "spring-boot-configuration-processor",
    "lombok",
    "mapstruct-processor"
]

logback-implementation = [
    "logback-loki",
    "janino"
]

# Test dependencies bundle
spring-test-implementation = [
    "spring-boot-starter-test",
    "spring-boot-testcontainers",
    "reactor-test",
    "kotlin-test-junit5",
    "kotlinx-coroutines-test",
    "spring-batch-test",
    "spring-kafka-test",
    "spring-modulith-starter-test",
    "spring-restdocs-webtestclient",
    "spring-security-test",
    "testcontainers-junit-jupiter",
    "testcontainers-kafka",
    "testcontainers-postgresql",
    "testcontainers-r2dbc",
    "testcontainers-vault"
]

spring-test-runtime-only = [
    "junit-platform-launcher"
]
