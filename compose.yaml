services:
  kafka:
    image: confluentinc/cp-kafka:8.0.0
    restart: always
    hostname: kafka
    ports:
      - "29092:29092"
      - "9093:9092"
    networks:
      - kafka
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NODE_ID: 2
      CLUSTER_ID: FWB1GS-aQ82liSaRpz1CHA
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 2@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka:9093
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    restart: on-failure
    ports:
      - "8989:8080"
    networks:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: FWB1GS-aQ82liSaRpz1CHA
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit -1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5
    depends_on:
      - kafka

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: stahl-db
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD?:err}
      POSTGRES_USER: stahl-user
    ports:
      - '5432:5432'
  redis:
    image: redis:latest
    ports:
      - '6379:6379'

  vault:
    image: hashicorp/vault:latest
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_DEV_ROOT_TOKEN_ID: "vault-plaintext-root-token"
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - "./deploy/config/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml"
      - "./deploy/data/prometheus:/prometheus"
    networks:
      - monitoring
  grafana:
    image: grafana/grafana-enterprise:latest
    environment:
      GF_SECURITY_ADMIN_USER: grafana
      GF_SECURITY_ADMIN_PASSWORD: secret
    ports:
      - "3000:3000"
    volumes:
      - "./deploy/config/grafana/provisioning:/etc/grafana/provisioning"
      - "./deploy/data/grafana:/var/lib/grafana"
    networks:
      - monitoring
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    networks:
      - monitoring

  stahl-eureka-server:
    restart: always
    build:
      dockerfile:  Dockerfile-JVM
      args:
        JAR_FILE: stahl-eureka/build/libs/stahl-eureka.jar
    environment:
      LOKI: http://host.docker.internal:3100
    networks:
      - stahl-net
    ports:
      - "8761:8761"

  stahl-gateway-server:
    restart: always
    build:
      dockerfile:  Dockerfile-JVM
      args:
        JAR_FILE: stahl-gateway/build/libs/stahl-gateway.jar
    environment:
      LOKI: http://host.docker.internal:3100
    networks:
      - stahl-net
    ports:
      - "8080:8080"

  stahl-config-server:
    restart: always
    build:
      dockerfile:  Dockerfile-JVM
      args:
        JAR_FILE: stahl-config/build/libs/stahl-config.jar
    environment:
      SPRING_PROFILES_ACTIVE: git
      LOKI: http://host.docker.internal:3100
    networks:
      - stahl-net
    ports:
      - "8888:8888"

  stahl-admin-server:
    build:
      dockerfile:  Dockerfile-JVM
      args:
        JAR_FILE: stahl-admin/build/libs/stahl-admin.jar
    environment:
      LOKI: http://host.docker.internal:3100
    networks:
      - stahl-net
    ports:
      - "9999:9999"
  stahl-users-service:
    depends_on:
      stahl-eureka-server:
        restart: true
        condition: service_healthy
      stahl-config-server:
        restart: true
        condition: service_healthy
    build:
      dockerfile: Dockerfile-JVM
      args:
        JAR_FILE: stahl-users/build/libs/stahl-users.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloud
      LOKI: http://host.docker.internal:3100
    ports:
      - "8081:8081"
  # bots
  nivora-bot:
    depends_on:
      stahl-eureka-server:
        restart: true
        condition: service_healthy
      stahl-config-server:
        restart: true
        condition: service_healthy
    build:
      dockerfile: Dockerfile-JVM
      args:
        JAR_FILE: stahl-bots/nivora/build/libs/nivora.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloud
      LOKI: http://host.docker.internal:3100
    networks:
      - stahl-net
    ports:
      - "7072:7072"
  serafim-bot:
    depends_on:
      stahl-eureka-server:
        restart: true
        condition: service_healthy
      stahl-config-server:
        restart: true
        condition: service_healthy
    build:
      dockerfile: Dockerfile-JVM
      args:
        JAR_FILE: stahl-bots/serafim/build/libs/serafim.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloud
      LOKI: http://host.docker.internal:3100
    networks:
      - stahl-net
    ports:
      - "7071:7071"
  zentra-bot:
    depends_on:
      stahl-eureka-server:
        restart: true
        condition: service_healthy
      stahl-config-server:
        restart: true
        condition: service_healthy
    build:
      dockerfile: Dockerfile-JVM
      args:
        JAR_FILE: stahl-bots/zentra/build/libs/zentra.jar
    environment:
      LOKI: http://host.docker.internal:3100
    networks:
      - stahl-net
    ports:
      - "7070:7070"

volumes:
  kafka_data:

networks:
  kafka:
    driver: bridge
  monitoring:
    driver: bridge
  stahl-net:
    driver: bridge
